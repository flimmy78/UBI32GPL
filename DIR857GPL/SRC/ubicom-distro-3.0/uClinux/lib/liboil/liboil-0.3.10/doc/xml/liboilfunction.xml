<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"
>
<refentry id="liboil-liboilfunction">
<refmeta>
<refentrytitle>OilFunction</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBOIL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>OilFunction</refname><refpurpose>Functions for manipulating function classes and implementations.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



            <link linkend="OilFunctionClass">OilFunctionClass</link>;
#define     <link linkend="OIL-DECLARE-CLASS:CAPS">OIL_DECLARE_CLASS</link>               (klass)
#define     <link linkend="OIL-DEFINE-CLASS-FULL:CAPS">OIL_DEFINE_CLASS_FULL</link>           (klass, string, test)
#define     <link linkend="OIL-DEFINE-CLASS:CAPS">OIL_DEFINE_CLASS</link>                (klass, string)
<link linkend="OilFunctionClass">OilFunctionClass</link>* <link linkend="oil-class-get-by-index">oil_class_get_by_index</link>    (<link linkend="int">int</link> i);
<link linkend="OilFunctionClass">OilFunctionClass</link>* <link linkend="oil-class-get">oil_class_get</link>             (const <link linkend="char">char</link> *class_name);
<link linkend="void">void</link>        <link linkend="oil-class-optimize">oil_class_optimize</link>              (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass);
<link linkend="int">int</link>         <link linkend="oil-class-get-n-classes">oil_class_get_n_classes</link>         (void);
<link linkend="void">void</link>        <link linkend="oil-class-choose-by-name">oil_class_choose_by_name</link>        (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             const <link linkend="char">char</link> *name);
<link linkend="void">void</link>        <link linkend="oil-class-register-impl-by-name">oil_class_register_impl_by_name</link> (const <link linkend="char">char</link> *klass_name,
                                             <link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);
<link linkend="void">void</link>        <link linkend="oil-class-register-impl">oil_class_register_impl</link>         (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             <link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);
<link linkend="void">void</link>        <link linkend="oil-class-register-impl-full">oil_class_register_impl_full</link>    (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             <link linkend="void">void</link> (*func) (void),
                                             const <link linkend="char">char</link> *name,
                                             unsigned <link linkend="int">int</link> flags);
            <link linkend="OilFunctionImpl">OilFunctionImpl</link>;
<link linkend="OilFunctionImpl">OilFunctionImpl</link>* <link linkend="oil-impl-get-by-index">oil_impl_get_by_index</link>      (<link linkend="int">int</link> i);
<link linkend="int">int</link>         <link linkend="oil-impl-is-runnable">oil_impl_is_runnable</link>            (<link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);
#define     <link linkend="OIL-CPU-FLAG-MASK:CAPS">OIL_CPU_FLAG_MASK</link>
#define     <link linkend="OIL-IMPL-FLAG-REF:CAPS">OIL_IMPL_FLAG_REF</link>
#define     <link linkend="OIL-IMPL-FLAG-OPT:CAPS">OIL_IMPL_FLAG_OPT</link>
#define     <link linkend="OIL-IMPL-FLAG-ASM:CAPS">OIL_IMPL_FLAG_ASM</link>
#define     <link linkend="OIL-IMPL-FLAG-DISABLED:CAPS">OIL_IMPL_FLAG_DISABLED</link>
#define     <link linkend="OIL-IMPL-FLAG-CMOV:CAPS">OIL_IMPL_FLAG_CMOV</link>
#define     <link linkend="OIL-IMPL-FLAG-MMX:CAPS">OIL_IMPL_FLAG_MMX</link>
#define     <link linkend="OIL-IMPL-FLAG-SSE:CAPS">OIL_IMPL_FLAG_SSE</link>
#define     <link linkend="OIL-IMPL-FLAG-MMXEXT:CAPS">OIL_IMPL_FLAG_MMXEXT</link>
#define     <link linkend="OIL-IMPL-FLAG-SSE2:CAPS">OIL_IMPL_FLAG_SSE2</link>
#define     <link linkend="OIL-IMPL-FLAG-SSE3:CAPS">OIL_IMPL_FLAG_SSE3</link>
#define     <link linkend="OIL-IMPL-FLAG-3DNOW:CAPS">OIL_IMPL_FLAG_3DNOW</link>
#define     <link linkend="OIL-IMPL-FLAG-3DNOWEXT:CAPS">OIL_IMPL_FLAG_3DNOWEXT</link>
#define     <link linkend="OIL-IMPL-FLAG-ALTIVEC:CAPS">OIL_IMPL_FLAG_ALTIVEC</link>
#define     <link linkend="OIL-DEFINE-IMPL-FULL:CAPS">OIL_DEFINE_IMPL_FULL</link>            (function,klass,flags)
#define     <link linkend="OIL-DEFINE-IMPL:CAPS">OIL_DEFINE_IMPL</link>                 (function,klass)
#define     <link linkend="OIL-DEFINE-IMPL-REF:CAPS">OIL_DEFINE_IMPL_REF</link>             (function,klass)
#define     <link linkend="OIL-DEFINE-IMPL-ASM:CAPS">OIL_DEFINE_IMPL_ASM</link>             (function,klass)
#define     <link linkend="OIL-DEFINE-IMPL-DEPENDS:CAPS">OIL_DEFINE_IMPL_DEPENDS</link>         (function,klass,...)
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
</para>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="OilFunctionClass"/>OilFunctionClass</title>
<indexterm><primary>OilFunctionClass</primary></indexterm><programlisting>typedef struct {
} OilFunctionClass;
</programlisting>
<para>
An opaque structure representing a function class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-DECLARE-CLASS:CAPS"/>OIL_DECLARE_CLASS()</title>
<indexterm><primary>OIL_DECLARE_CLASS</primary></indexterm><programlisting>#define     OIL_DECLARE_CLASS(klass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-CLASS-FULL:CAPS"/>OIL_DEFINE_CLASS_FULL()</title>
<indexterm><primary>OIL_DEFINE_CLASS_FULL</primary></indexterm><programlisting>#define     OIL_DEFINE_CLASS_FULL(klass, string, test)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>test</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-CLASS:CAPS"/>OIL_DEFINE_CLASS()</title>
<indexterm><primary>OIL_DEFINE_CLASS</primary></indexterm><programlisting>#define     OIL_DEFINE_CLASS(klass, string)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-get-by-index"/>oil_class_get_by_index ()</title>
<indexterm><primary>oil_class_get_by_index</primary></indexterm><programlisting><link linkend="OilFunctionClass">OilFunctionClass</link>* oil_class_get_by_index    (<link linkend="int">int</link> i);</programlisting>
<para>
Returns a pointer to the function class with index <parameter>i</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <parameter>OilFunctionClass</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-get"/>oil_class_get ()</title>
<indexterm><primary>oil_class_get</primary></indexterm><programlisting><link linkend="OilFunctionClass">OilFunctionClass</link>* oil_class_get             (const <link linkend="char">char</link> *class_name);</programlisting>
<para>
Returns a pointer to the function class that has the given class
name.  If no such class is found, NULL is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>class_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the function class
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to a function class
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-optimize"/>oil_class_optimize ()</title>
<indexterm><primary>oil_class_optimize</primary></indexterm><programlisting><link linkend="void">void</link>        oil_class_optimize              (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass);</programlisting>
<para>
Tests and profiles each implementation for the given function
class.  Testing compares the output of running each implementation
on random input against the reference implementation for the
same input.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> a function class
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-get-n-classes"/>oil_class_get_n_classes ()</title>
<indexterm><primary>oil_class_get_n_classes</primary></indexterm><programlisting><link linkend="int">int</link>         oil_class_get_n_classes         (void);</programlisting>
<para>
Returns the number of function classes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of function classes
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-choose-by-name"/>oil_class_choose_by_name ()</title>
<indexterm><primary>oil_class_choose_by_name</primary></indexterm><programlisting><link linkend="void">void</link>        oil_class_choose_by_name        (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             const <link linkend="char">char</link> *name);</programlisting>
<para>
Sets the chosen implementation for the given function class to
the implementation with the given name.  If no implementation
having the given name is found, the chosen implementation is
not changed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> a function class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name of an implementation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-register-impl-by-name"/>oil_class_register_impl_by_name ()</title>
<indexterm><primary>oil_class_register_impl_by_name</primary></indexterm><programlisting><link linkend="void">void</link>        oil_class_register_impl_by_name (const <link linkend="char">char</link> *klass_name,
                                             <link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);</programlisting>
<para>
Adds <parameter>impl</parameter> to the list of implementations associated with
the function class given by <parameter>klass_name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> an implementation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-register-impl"/>oil_class_register_impl ()</title>
<indexterm><primary>oil_class_register_impl</primary></indexterm><programlisting><link linkend="void">void</link>        oil_class_register_impl         (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             <link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);</programlisting>
<para>
Adds <parameter>impl</parameter> to the list of implementations associated with
the function class given by <parameter>klass</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> the class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> an implementation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-class-register-impl-full"/>oil_class_register_impl_full ()</title>
<indexterm><primary>oil_class_register_impl_full</primary></indexterm><programlisting><link linkend="void">void</link>        oil_class_register_impl_full    (<link linkend="OilFunctionClass">OilFunctionClass</link> *klass,
                                             <link linkend="void">void</link> (*func) (void),
                                             const <link linkend="char">char</link> *name,
                                             unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
Adds <parameter>func</parameter> to the list of implementations associated with
the function class given by <parameter>klass</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> the class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> the function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> name of the function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> CPU flags
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OilFunctionImpl"/>OilFunctionImpl</title>
<indexterm><primary>OilFunctionImpl</primary></indexterm><programlisting>typedef struct {
} OilFunctionImpl;
</programlisting>
<para>
An opaque structure representing a function implementation.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="oil-impl-get-by-index"/>oil_impl_get_by_index ()</title>
<indexterm><primary>oil_impl_get_by_index</primary></indexterm><programlisting><link linkend="OilFunctionImpl">OilFunctionImpl</link>* oil_impl_get_by_index      (<link linkend="int">int</link> i);</programlisting>
<para>
Returns a pointer to the function implementation with index <parameter>i</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to a function implementation structure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-impl-is-runnable"/>oil_impl_is_runnable ()</title>
<indexterm><primary>oil_impl_is_runnable</primary></indexterm><programlisting><link linkend="int">int</link>         oil_impl_is_runnable            (<link linkend="OilFunctionImpl">OilFunctionImpl</link> *impl);</programlisting>
<para>
Determines whether the function implementation given by <parameter>impl</parameter>
can be executed by the current CPU.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> an <parameter>OilFunctionImpl</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 1 if the implementation can be executed, otherwise 0
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-CPU-FLAG-MASK:CAPS"/>OIL_CPU_FLAG_MASK</title>
<indexterm><primary>OIL_CPU_FLAG_MASK</primary></indexterm><programlisting>#define OIL_CPU_FLAG_MASK 0xffff0000
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-REF:CAPS"/>OIL_IMPL_FLAG_REF</title>
<indexterm><primary>OIL_IMPL_FLAG_REF</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_REF	(1&lt;&lt;0)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-OPT:CAPS"/>OIL_IMPL_FLAG_OPT</title>
<indexterm><primary>OIL_IMPL_FLAG_OPT</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_OPT	(1&lt;&lt;1)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-ASM:CAPS"/>OIL_IMPL_FLAG_ASM</title>
<indexterm><primary>OIL_IMPL_FLAG_ASM</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_ASM	(1&lt;&lt;2)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-DISABLED:CAPS"/>OIL_IMPL_FLAG_DISABLED</title>
<indexterm><primary>OIL_IMPL_FLAG_DISABLED</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_DISABLED	(1&lt;&lt;3)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-CMOV:CAPS"/>OIL_IMPL_FLAG_CMOV</title>
<indexterm><primary>OIL_IMPL_FLAG_CMOV</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_CMOV              (1&lt;&lt;16)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-MMX:CAPS"/>OIL_IMPL_FLAG_MMX</title>
<indexterm><primary>OIL_IMPL_FLAG_MMX</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_MMX               (1&lt;&lt;17)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-SSE:CAPS"/>OIL_IMPL_FLAG_SSE</title>
<indexterm><primary>OIL_IMPL_FLAG_SSE</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_SSE               (1&lt;&lt;18)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-MMXEXT:CAPS"/>OIL_IMPL_FLAG_MMXEXT</title>
<indexterm><primary>OIL_IMPL_FLAG_MMXEXT</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_MMXEXT            (1&lt;&lt;19)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-SSE2:CAPS"/>OIL_IMPL_FLAG_SSE2</title>
<indexterm><primary>OIL_IMPL_FLAG_SSE2</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_SSE2              (1&lt;&lt;20)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-SSE3:CAPS"/>OIL_IMPL_FLAG_SSE3</title>
<indexterm><primary>OIL_IMPL_FLAG_SSE3</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_SSE3              (1&lt;&lt;23)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-3DNOW:CAPS"/>OIL_IMPL_FLAG_3DNOW</title>
<indexterm><primary>OIL_IMPL_FLAG_3DNOW</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_3DNOW             (1&lt;&lt;21)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-3DNOWEXT:CAPS"/>OIL_IMPL_FLAG_3DNOWEXT</title>
<indexterm><primary>OIL_IMPL_FLAG_3DNOWEXT</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_3DNOWEXT          (1&lt;&lt;22)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-IMPL-FLAG-ALTIVEC:CAPS"/>OIL_IMPL_FLAG_ALTIVEC</title>
<indexterm><primary>OIL_IMPL_FLAG_ALTIVEC</primary></indexterm><programlisting>#define OIL_IMPL_FLAG_ALTIVEC       (1&lt;&lt;16)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-IMPL-FULL:CAPS"/>OIL_DEFINE_IMPL_FULL()</title>
<indexterm><primary>OIL_DEFINE_IMPL_FULL</primary></indexterm><programlisting>#define     OIL_DEFINE_IMPL_FULL(function,klass,flags)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-IMPL:CAPS"/>OIL_DEFINE_IMPL()</title>
<indexterm><primary>OIL_DEFINE_IMPL</primary></indexterm><programlisting>#define     OIL_DEFINE_IMPL(function,klass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-IMPL-REF:CAPS"/>OIL_DEFINE_IMPL_REF()</title>
<indexterm><primary>OIL_DEFINE_IMPL_REF</primary></indexterm><programlisting>#define     OIL_DEFINE_IMPL_REF(function,klass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-IMPL-ASM:CAPS"/>OIL_DEFINE_IMPL_ASM()</title>
<indexterm><primary>OIL_DEFINE_IMPL_ASM</primary></indexterm><programlisting>#define     OIL_DEFINE_IMPL_ASM(function,klass)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="OIL-DEFINE-IMPL-DEPENDS:CAPS"/>OIL_DEFINE_IMPL_DEPENDS()</title>
<indexterm><primary>OIL_DEFINE_IMPL_DEPENDS</primary></indexterm><programlisting>#define     OIL_DEFINE_IMPL_DEPENDS(function,klass,...)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
